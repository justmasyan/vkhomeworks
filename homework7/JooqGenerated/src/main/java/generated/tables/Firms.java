/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.pojos.records.FirmsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Firms extends TableImpl<FirmsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.firms</code>
     */
    public static final Firms FIRMS = new Firms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FirmsRecord> getRecordType() {
        return FirmsRecord.class;
    }

    /**
     * The column <code>public.firms.id</code>.
     */
    public final TableField<FirmsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.firms.title</code>.
     */
    public final TableField<FirmsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    private Firms(Name alias, Table<FirmsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Firms(Name alias, Table<FirmsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.firms</code> table reference
     */
    public Firms(String alias) {
        this(DSL.name(alias), FIRMS);
    }

    /**
     * Create an aliased <code>public.firms</code> table reference
     */
    public Firms(Name alias) {
        this(alias, FIRMS);
    }

    /**
     * Create a <code>public.firms</code> table reference
     */
    public Firms() {
        this(DSL.name("firms"), null);
    }

    public <O extends Record> Firms(Table<O> child, ForeignKey<O, FirmsRecord> key) {
        super(child, key, FIRMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FirmsRecord, Integer> getIdentity() {
        return (Identity<FirmsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FirmsRecord> getPrimaryKey() {
        return Keys.FIRMS_PKEY;
    }

    @Override
    public Firms as(String alias) {
        return new Firms(DSL.name(alias), this);
    }

    @Override
    public Firms as(Name alias) {
        return new Firms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Firms rename(String name) {
        return new Firms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Firms rename(Name name) {
        return new Firms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
