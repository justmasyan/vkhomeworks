/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Products;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductsRecord extends UpdatableRecordImpl<ProductsRecord> implements Record4<Integer, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.products.id</code>.
     */
    public ProductsRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.products.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.products.title</code>.
     */
    public ProductsRecord setTitle(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.products.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.products.company</code>.
     */
    public ProductsRecord setCompany(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.products.company</code>.
     */
    public Integer getCompany() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.products.amount</code>.
     */
    public ProductsRecord setAmount(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.products.amount</code>.
     */
    public Integer getAmount() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Products.PRODUCTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Products.PRODUCTS.TITLE;
    }

    @Override
    public Field<Integer> field3() {
        return Products.PRODUCTS.COMPANY;
    }

    @Override
    public Field<Integer> field4() {
        return Products.PRODUCTS.AMOUNT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public Integer component3() {
        return getCompany();
    }

    @Override
    public Integer component4() {
        return getAmount();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public Integer value3() {
        return getCompany();
    }

    @Override
    public Integer value4() {
        return getAmount();
    }

    @Override
    public ProductsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ProductsRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public ProductsRecord value3(Integer value) {
        setCompany(value);
        return this;
    }

    @Override
    public ProductsRecord value4(Integer value) {
        setAmount(value);
        return this;
    }

    @Override
    public ProductsRecord values(Integer value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductsRecord
     */
    public ProductsRecord() {
        super(Products.PRODUCTS);
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    public ProductsRecord(Integer id, String title, Integer company, Integer amount) {
        super(Products.PRODUCTS);

        setId(id);
        setTitle(title);
        setCompany(company);
        setAmount(amount);
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    public ProductsRecord(generated.tables.pojos.Products value) {
        super(Products.PRODUCTS);

        if (value != null) {
            setId(value.getId());
            setTitle(value.getTitle());
            setCompany(value.getCompany());
            setAmount(value.getAmount());
        }
    }
}
