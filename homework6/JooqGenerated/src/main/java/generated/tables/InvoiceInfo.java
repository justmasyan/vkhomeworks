/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.InvoiceInfoRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvoiceInfo extends TableImpl<InvoiceInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.invoice_info</code>
     */
    public static final InvoiceInfo INVOICE_INFO = new InvoiceInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoiceInfoRecord> getRecordType() {
        return InvoiceInfoRecord.class;
    }

    /**
     * The column <code>public.invoice_info.id</code>.
     */
    public final TableField<InvoiceInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invoice_info.date</code>.
     */
    public final TableField<InvoiceInfoRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.invoice_info.provider</code>.
     */
    public final TableField<InvoiceInfoRecord, Integer> PROVIDER = createField(DSL.name("provider"), SQLDataType.INTEGER, this, "");

    private InvoiceInfo(Name alias, Table<InvoiceInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvoiceInfo(Name alias, Table<InvoiceInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.invoice_info</code> table reference
     */
    public InvoiceInfo(String alias) {
        this(DSL.name(alias), INVOICE_INFO);
    }

    /**
     * Create an aliased <code>public.invoice_info</code> table reference
     */
    public InvoiceInfo(Name alias) {
        this(alias, INVOICE_INFO);
    }

    /**
     * Create a <code>public.invoice_info</code> table reference
     */
    public InvoiceInfo() {
        this(DSL.name("invoice_info"), null);
    }

    public <O extends Record> InvoiceInfo(Table<O> child, ForeignKey<O, InvoiceInfoRecord> key) {
        super(child, key, INVOICE_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InvoiceInfoRecord, Integer> getIdentity() {
        return (Identity<InvoiceInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvoiceInfoRecord> getPrimaryKey() {
        return Keys.INVOICE_INFO_PKEY;
    }

    @Override
    public List<ForeignKey<InvoiceInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVOICE_INFO__INVOICE_INFO_PROVIDER_FKEY);
    }

    private transient Providers _providers;

    /**
     * Get the implicit join path to the <code>public.providers</code> table.
     */
    public Providers providers() {
        if (_providers == null)
            _providers = new Providers(this, Keys.INVOICE_INFO__INVOICE_INFO_PROVIDER_FKEY);

        return _providers;
    }

    @Override
    public InvoiceInfo as(String alias) {
        return new InvoiceInfo(DSL.name(alias), this);
    }

    @Override
    public InvoiceInfo as(Name alias) {
        return new InvoiceInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceInfo rename(String name) {
        return new InvoiceInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceInfo rename(Name name) {
        return new InvoiceInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
